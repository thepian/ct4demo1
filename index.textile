---
layout: master
title: Caplin Trader 4 Demo
---

h1. Experiments

h2. Upper/Lower Division

Initially I thought of using the HTML5 Drag-n-drop API, but I can't find a way to
restrict the movement to vertical. Sliding the content up and down for every mouse 
move might proved a bit intensive.

Then I realised that there could be several ways to change the divider:
1) Grab-and-drag with mouse or finger (divider needs to be thick)
2) Keyboard hotkey.
3) Double-click
4) Place up and down arrows on the divider
5) Scroll wheel while over the divider
6) Multi-finger swipe while over the divider or content.

Options 2-6 can be supported without conflicting with the interactions for other 
elements. Each of them should be pretty straightforward to implement.
I would suggest implementing those first and add 1 if it actually is needed.

# "Upper/Lower Division":upper-lower


h2. Breakout Window

# "Breakout Window":breakout


h2. Other Devices / Apps

h2. Scroll Bars

h2. Panel Configuration



h1. Principles

h2. Vertically Divided

The panels are placed in one of two docking areas. 
The areas take up the full width of the UI. These areas share the available 
content height. The user can change the division by moving a divider.
The typical division is 66% for the upper and 33% for the lower. 
Other options are 33/66 and 100/0. By fixing the options, rather than allowing
moving the divider to arbitrary splits, the home area for a panel becomes obvious,
and swiping gestures can be used to change the split.

This means that when you drag a panel to a device or other window it will be placed 
in its home area. It also makes testing and documentation much simpler.

h3. Indicators are not Panels

In addition to the content, indicators can be added along the top and bottom edges.
In this Demo the bottom edge is not used, but some clients may want to use it.
Panels are configured with a home area as either upper or lower. 
For constrained size devices like phones the areas will be implemented diffrently, 
but there will be a similar home area affinity for a panel.

h2. Side Panels

You can mark panels in the upper and lower areas as side panels, either to the 
left or to the right.
In this Demo side panels are only added to the upper area, but it remains possible
to add them to the lower.

h2. Restrictions to allow better user interaction

If you have a very generic way of describing the user interface similar to
the one in Webcentric, there are very few rules that can be applied to allow
for gestures. Most gestures must be programmed as special cases adding
to the required development/testing/maintenance.

The CT4 user interface should run on a windowing model where the interface is
divided into predefined areas. These areas have well defined interactions 
and behaviour.

It has been said that good design comes from taking away until just before
it would be too much.

In a similar vein we should be specific about how the interface behaves
and make an implementation that reflects this, but not go so far that we
don't have room for useful variations in the application.

h2. Starting with a Feature Subset

Initially we experiment with a subset of the features in CT2/CT3 to build a
consistent core experience. Subsequently we can get a feel for how/if to 
integrate the remaining features like multiple layouts.

h2. App, Page and Layout Serving

When the webapp page is served it is put together on the server based on a layout.
The page will hold the initial state of the page as shown in the browser.
This allows for a very quick response.

Rather than switching between layouts within the same web page, use the web browser
to open multiple tabs or windows with a layout in each.

h2. Edge cases to review

Single panel ripped into a window without any additional panels.
